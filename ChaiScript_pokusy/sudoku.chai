class SudokuType {
  var data

  def SudokuType() {
    this.data = 0
  }

  def SudokuType(string x) {
    if ("classic" == x) {
      this.data = 1
    } else if ("geometric" == x) {
      this.data = 2
    } else if ("irregular" == x) {
      this.data = 3
    } else {
      throw("bad SudokuType string")
    }
  }

  def default(SudokuType x) {
    if (this.data == 0) {
      this.data = x.data
    }
    return this
  }
}

global classic = SudokuType("classic")
global geometric = SudokuType("geometric")
global irregular = SudokuType("irregular")

var type = read(SudokuType, "type").default(classic);
puts(type.data);puts('\n');
var topologyType = read(TopologyType, "topologyType").default(type == irregular ? NoTopology : Rectangle)
puts(topologyType.data);puts('\n');
var size = read(Int, "size").default(type == irregular ? Int(1) : Int(9))
puts(size.data);puts('\n');
var fieldType = read(Set(Int), "fieldType").default(type == irregular ? Set(Int)() : Set(Int)(1, size))
puts(fieldType.low);puts(", ");puts(fieldType.high);puts('\n')
var areas = read(

